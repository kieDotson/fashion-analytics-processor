# .github/workflows/infrastructure.yaml
name: Infrastructure CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
  workflow_dispatch:
    # Allow manual triggers

env:
  KUBECTL_VERSION: "v1.28.0"
  KUSTOMIZE_VERSION: "v5.6.0"
  HELM_VERSION: "v3.12.1"

jobs:
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Kubernetes tools
        run: |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/${{ env.KUBECTL_VERSION }}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          # Install kustomize
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash -s ${{ env.KUSTOMIZE_VERSION }}
          sudo mv kustomize /usr/local/bin/
          
          # Install Helm
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh --version ${{ env.HELM_VERSION }}
          
          # Install yamllint
          sudo apt-get update && sudo apt-get install -y yamllint
      
      - name: Validate YAML formatting
        run: |
          yamllint -c .yamllint.yaml infrastructure/ || echo "YAML linting issues found - please review"
      
      - name: Validate Kustomize resources
        run: |
          # Validate each component using kustomize
          for dir in $(find infrastructure/kubernetes -name "kustomization.yaml" -exec dirname {} \;); do
            echo "Validating kustomize directory: $dir"
            kustomize build $dir > /dev/null || echo "Kustomize validation warning in $dir"
          done
      
      - name: Validate Helm templates
        run: |
          # Validate Helm values for monitoring
          helm template monitoring prometheus-community/kube-prometheus-stack \
            -f infrastructure/kubernetes/monitoring/prometheus-values.yaml \
            --namespace monitoring > /dev/null || echo "Helm template validation warning for monitoring"
            
          # Validate Helm values for Strimzi
          helm template strimzi-kafka-operator strimzi/strimzi-kafka-operator \
            -f infrastructure/kubernetes/strimzi/values.yaml \
            --namespace kafka-operator > /dev/null || echo "Helm template validation warning for Strimzi"
      
      - name: Check for syntax errors
        run: |
          for file in $(find infrastructure -name "*.yaml" -type f -not -path "*/kustomization.yaml" -not -path "*/values.yaml"); do
            kubectl apply --dry-run=client -f $file || echo "Syntax error in $file - please review"
          done

  deploy:
    name: Deploy to Environment
    needs: validate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/
      
      - name: Configure kubectl
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
      
      - name: Deploy with ArgoCD
        run: |
          # Login to ArgoCD
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --insecure
          
          # Apply all ArgoCD applications
          kubectl apply -f infrastructure/kubernetes/argocd/applications/
          
          # Sync all applications in the correct order
          echo "Syncing infrastructure components..."
          
          # 1. Storage classes (foundational)
          argocd app sync storage-classes
          argocd app wait storage-classes --health --timeout 300
          
          # 2. Operators
          echo "Syncing operators..."
          argocd app sync kafka-operator
          argocd app wait kafka-operator --health --timeout 300
          
          argocd app sync apicurio-registry-operator
          argocd app wait apicurio-registry-operator --health --timeout 300
          
          # 3. Services and instances
          echo "Syncing services..."
          argocd app sync kafka-cluster
          argocd app wait kafka-cluster --health --timeout 600
          
          argocd app sync apicurio-registry-instance
          argocd app wait apicurio-registry-instance --health --timeout 300
          
          # 4. Monitoring (last, as it depends on services to monitor)
          echo "Syncing monitoring..."
          argocd app sync monitoring-stack
          argocd app wait monitoring-stack --health --timeout 300
      
      - name: Verify deployment
        run: |
          echo "Verifying Kafka deployment..."
          kubectl get kafka -n fashion-analytics
          
          echo "Verifying Apicurio Registry deployment..."
          kubectl get apicurioregistry -n fashion-analytics
          
          echo "Deployment complete!"