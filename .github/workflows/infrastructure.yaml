# .github/workflows/infrastructure.yaml
name: Infrastructure CI/CD

on:
  push:
    branches: [main]
    paths:
      - "infrastructure/**"
  pull_request:
    branches: [main]
    paths:
      - "infrastructure/**"
=

env:
  KUBECTL_VERSION: "v1.28.0"
  KUSTOMIZE_VERSION: "v5.6.0"
  HELM_VERSION: "v3.12.1"

jobs:
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Kubernetes tools
        run: |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

          # Install kustomize directly from GitHub releases
          curl -L https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.6.0/kustomize_v5.6.0_linux_amd64.tar.gz -o kustomize.tar.gz
          tar -zxvf kustomize.tar.gz
          chmod +x kustomize
          sudo mv kustomize /usr/local/bin/

          # Verify installation
          kustomize version

          # Install Helm
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh --version ${{ env.HELM_VERSION }}

          # Install yamllint
          sudo apt-get update && sudo apt-get install -y yamllint

      - name: Validate YAML formatting
        run: |
          # Create .yamllint.yaml file if it doesn't exist
          if [ ! -f ../.yamllint.yaml ]; then
            echo "Creating default .yamllint.yaml file"
            cat > ../.yamllint.yaml << EOF
          extends: default

          rules:
            line-length:
              max: 120
              level: warning
            document-start:
              present: true
              level: warning
          EOF
          fi

          # Fail on linting issues
          yamllint -c .yamllint.yaml infrastructure/

      - name: Validate Kustomize resources
        run: |
          # Initialize error flag
          KUSTOMIZE_ERROR=0

          # Validate each component using kustomize
          for dir in $(find infrastructure/kubernetes -name "kustomization.yaml" -exec dirname {} \;); do
            echo "Validating kustomize directory: $dir"
            if ! kustomize build $dir > /dev/null; then
              echo "Error: Kustomize validation failed in $dir"
              KUSTOMIZE_ERROR=1
            fi
          done

          # Exit with error if any kustomize build failed
          exit $KUSTOMIZE_ERROR

      - name: Validate Helm templates
        run: |
          # Initialize error flag
          HELM_ERROR=0

          # Validate Helm values for monitoring
          if ! helm template monitoring prometheus-community/kube-prometheus-stack \
              -f infrastructure/kubernetes/monitoring/prometheus-values.yaml \
              --namespace monitoring > /dev/null; then
            echo "Error: Helm template validation failed for monitoring"
            HELM_ERROR=1
          fi
              
          # Validate Helm values for Strimzi
          if ! helm template strimzi-kafka-operator strimzi/strimzi-kafka-operator \
              -f infrastructure/kubernetes/strimzi/values.yaml \
              --namespace kafka-operator > /dev/null; then
            echo "Error: Helm template validation failed for Strimzi"
            HELM_ERROR=1
          fi

          # Exit with error if any helm template failed
          exit $HELM_ERROR

      - name: Check for syntax errors
        run: |
          # Initialize error flag
          SYNTAX_ERROR=0

          for file in $(find infrastructure -name "*.yaml" -type f -not -path "*/kustomization.yaml" -not -path "*/values.yaml"); do
            if ! kubectl apply --dry-run=client -f $file; then
              echo "Error: Syntax error in $file"
              SYNTAX_ERROR=1
            fi
          done

          # Exit with error if any syntax check failed
          exit $SYNTAX_ERROR
